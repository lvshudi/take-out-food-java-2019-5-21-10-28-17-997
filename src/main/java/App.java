import java.util.LinkedHashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;

import com.sun.javafx.collections.MappingChange.Map;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
	private ItemRepository itemRepository;
	private SalesPromotionRepository salesPromotionRepository;

	public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
		this.itemRepository = itemRepository;
		this.salesPromotionRepository = salesPromotionRepository;
	}
	
	static String goods = "";
	
	public String bestCharge(List<String> inputs) {
		// TODO: write code here]
		LinkedHashMap<Item, Integer> map = new LinkedHashMap<Item, Integer>();
		Iterator<String> inputsIterator = inputs.iterator();
		while (inputsIterator.hasNext()) {
			String input = (String) inputsIterator.next();
			String[] inputArray = input.split(" ");
			String id = inputArray[0];// 当前循环商品的id
			int num = Integer.parseInt(inputArray[2]);// 当前循环商品的数量
			List<Item> items = itemRepository.findAll();
			Iterator<Item> itemIterator = items.iterator();
			while (itemIterator.hasNext()) {
				Item item = (Item) itemIterator.next();
				if (item.getId().equals(id)) {
					map.put(item, num);
				}
			}
		}
		int tPrice = totalPrice(map);//折扣价格
		int cPrice = countPrice(map);//满减价格
		int iPrice = infactPrice(map);//优惠前价格

		String content = "";
		
		for(Entry<Item, Integer> entry: map.entrySet())
        {
			int sum = (int)entry.getKey().getPrice()* entry.getValue();
			content += entry.getKey().getName() + " x " + entry.getValue() + " = " + sum + "元\n";
			System.out.println("Key: "+ entry.getKey().getName()+ " Value: "+entry.getValue());
        }
		
		if(tPrice < cPrice) {
			String result = "============= 订餐明细 =============\n" +
	                content +
	                "-----------------------------------\n" +
	                "使用优惠:\n" +
	                "满30减6元，省6元\n" +
	                "-----------------------------------\n" +
	                "总计：" + tPrice + "元\n" +
	                "===================================";
			System.out.println(result);
			return result;
		} else if (tPrice > cPrice) {
			String result = "============= 订餐明细 =============\n" +
	                content +
	                "-----------------------------------\n" +
	                "使用优惠:\n" +
	                "指定菜品半价(黄焖鸡，凉皮)，省" + (iPrice - cPrice) + "元\n" +
	                "-----------------------------------\n" +
	                "总计：" + cPrice + "元\n" +
	                "===================================";
			System.out.println(result);
			return result;
		} else {
			String result = "============= 订餐明细 =============\n" +
	                content +
	                "-----------------------------------\n" +
	                "总计：" + iPrice + "元\n" +
	                "===================================";
			System.out.println(result);
			return result;
		}
//		for(Entry<Item, Integer> entry: map.entrySet())
//        {
//			System.out.println("Key: "+ entry.getKey().getName()+ " Value: "+entry.getValue());
//        }

	}

	public int totalPrice(LinkedHashMap<Item, Integer> map) {
		int sum = 0;
		for (Entry<Item, Integer> entry : map.entrySet()) {
			sum += (entry.getKey().getPrice() * entry.getValue());

		}
		if (sum >= 30) {
			sum = sum - 6;
		}
		
		return sum;
	}

	public int countPrice(LinkedHashMap<Item, Integer> map) {
		int sum = 0;
		for (Entry<Item, Integer> entry : map.entrySet()) {
			if (entry.getKey().getId().equals("ITEM0001")) {
				sum += (entry.getKey().getPrice() / 2 * entry.getValue());
				if(goods.equals("")) {
					goods = "黄焖鸡";
				} else {
					goods += "，黄焖鸡";
				}
			} else if(entry.getKey().getId().equals("ITEM0022")) {
				sum += (entry.getKey().getPrice() / 2 * entry.getValue());
				if(goods.equals("")) {
					goods = "凉皮";
				} else {
					goods += "，凉皮";
				}
			} else {
				sum += (entry.getKey().getPrice() * entry.getValue());
			}
		}

		return sum;
	}

	public int infactPrice(LinkedHashMap<Item, Integer> map) {
		int sum = 0;
		for (Entry<Item, Integer> entry : map.entrySet()) {
			sum += (entry.getKey().getPrice() * entry.getValue());
		}

		return sum;
	}
}
